name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: pnpm install

    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps
  
    - name: Run Playwright tests
      run: pnpm exec playwright test
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
  
    - name: Read Summary Report to Get Test Results
      if: always()
      run: |
        STATUS=$(cat ./summary.json | jq -r '.status')
        echo "STATUS=$STATUS" >> $GITHUB_ENV 
        PASSED=$(cat ./summary.json | jq -r '.passed[]' | tr '\n' ' ')
        echo "PASSED=$PASSED" >> $GITHUB_ENV 
        TIMEOUT=$(cat ./summary.json | jq -r '.timedOut[]' | tr '\n' ' ' | sed 's/ /--->TIMEOUT /g')
        FAILURES=$(cat ./summary.json | jq -r '.failed[]' | tr '\n' ' ')
        FAILURES+=$TIMEOUT
        echo "FAILURES=$FAILURES" >> $GITHUB_ENV
    - name: Send Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: repo,eventName,workflow,job,took
        custom_payload: |
          {
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
              title: `Playwright Demo Automation Results :test_tube:`,
              fields: [{
                title: 'Site Under Test',
                value: '${{ env.APP_URL }}',
                short: true
              },
              {
                title: 'Triggered By',
                value: [{'origin': 'pull_request', 'new': 'Pull Request'}, {'origin': 'schedule', 'new': 'Schedule'}, {'origin': 'repository_dispatch', 'new': 'Deploy'}, {'origin': 'workflow_dispatch', 'new': 'GitHub Actions'}].find(item => item.origin === `${process.env.AS_EVENT_NAME}`).new || `${process.env.AS_EVENT_NAME}`,
                short: true
              },
              {
                title: 'Repo',
                value: `${process.env.AS_REPO}`,
                short: true
              },
              {
                title: 'Execution Time',
                value: `${process.env.AS_TOOK}`,
                short: true
              },
              {
                title: 'Workflow',
                value: `${process.env.AS_WORKFLOW}`,
                short: true
              },
              {
                title: 'Total Tests',
                value: (`${{ env.FAILURES }}`.match(/.spec.ts/g) || []).length + (`${{ env.PASSED }}`.match(/.spec.ts/g) || []).length,
                short: true
              },
              {
                title: 'Pull Request',
                value: `${{ env.PULL_REQUEST_URL }}`,
                short: false
              },
              {
                title: 'Failures',
                value: `${{ env.FAILURES }}` === '' ? 'No failures' : `${{ env.FAILURES }}`.match(/.spec.ts/g).length > 10 ? `Too many failures to print. Please go to GitHub to see full list of failures` : '```${{ env.FAILURES }}```'.replace(/ /g, '\n'),
                short: false
              }]
            }]
          }  
      env:
        SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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 # required